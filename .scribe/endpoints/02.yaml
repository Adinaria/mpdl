name: User
description: |-

  API endpoints for managing users
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/users
    metadata:
      groupName: User
      groupDescription: |-

        API endpoints for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Get all users'
      description: 'Retrieves a list of all users in the system with their roles.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
            {
              "uuid": "550e8400-e29b-41d4-a716-446655440000",
              "name": "John",
              "last_name": "Doe",
              "email": "john.doe@example.com",
              "roles": [
                {
                  "name": "administrator"
                }
              ]
            },
            {
              "uuid": "550e8400-e29b-41d4-a716-446655440001",
              "name": "Jane",
              "last_name": "Smith",
              "email": "jane.smith@example.com",
              "roles": [
                {
                  "name": "user"
                }
              ]
            }
          ]
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/users
    metadata:
      groupName: User
      groupDescription: |-

        API endpoints for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new user'
      description: 'Creates a new user in the system and assigns specified roles.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: "The user's first name."
        required: true
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "The user's email address. Must be unique."
        required: true
        example: john.doe@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      last_name:
        name: last_name
        description: "The user's last name."
        required: true
        example: Doe
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password. Must be at least 8 characters."
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      roles:
        name: roles
        description: 'optional Array of role names to assign to the user.'
        required: false
        example:
          - administrator
          - user
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation. Must match password.'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: John
      email: john.doe@example.com
      last_name: Doe
      password: password123
      roles:
        - administrator
        - user
      password_confirmation: password123
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "data": {
              "uuid": "550e8400-e29b-41d4-a716-446655440002",
              "name": "John",
              "last_name": "Doe",
              "email": "john.doe@example.com",
              "roles": [
                {
                  "name": "administrator"
                }
              ]
            },
            "message": "User created successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "email": ["The email has already been taken."],
              "password": ["The password must be at least 8 characters."],
              "roles": ["The selected roles is invalid."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/users/{uuid}'
    metadata:
      groupName: User
      groupDescription: |-

        API endpoints for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Get user by UUID'
      description: 'Retrieves a specific user by UUID with their assigned roles.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      uuid:
        name: uuid
        description: 'The UUID of the user.'
        required: true
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      uuid: 550e8400-e29b-41d4-a716-446655440000
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "uuid": "550e8400-e29b-41d4-a716-446655440000",
            "name": "John",
            "last_name": "Doe",
            "email": "john.doe@example.com",
            "roles": [
              {
                "name": "administrator"
              },
              {
                "name": "user"
              }
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "User not found"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/users/{uuid}'
    metadata:
      groupName: User
      groupDescription: |-

        API endpoints for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete user'
      description: 'Deletes a user from the system.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      uuid:
        name: uuid
        description: 'The UUID of the user to delete.'
        required: true
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      uuid: 550e8400-e29b-41d4-a716-446655440000
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 204
        content: ''
        headers: []
        description: 'User deleted successfully'
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "User not found"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/users/{uuid}'
    metadata:
      groupName: User
      groupDescription: |-

        API endpoints for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user (PUT)'
      description: "Completely updates a user's information and roles. All fields are required."
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      uuid:
        name: uuid
        description: 'The UUID of the user to update.'
        required: true
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      uuid: 550e8400-e29b-41d4-a716-446655440000
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: "The user's first name."
        required: true
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "The user's email address. Must be unique."
        required: true
        example: john.doe@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      last_name:
        name: last_name
        description: "The user's last name."
        required: true
        example: Doe
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password. Must be at least 8 characters."
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      roles:
        name: roles
        description: 'optional Array of role names to assign to the user.'
        required: false
        example:
          - administrator
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation. Must match password.'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: John
      email: john.doe@example.com
      last_name: Doe
      password: password123
      roles:
        - administrator
      password_confirmation: password123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "uuid": "550e8400-e29b-41d4-a716-446655440000",
            "name": "John",
            "last_name": "Doe",
            "email": "john.doe@example.com",
            "roles": [
              {
                "name": "administrator"
              }
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "User not found"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "email": ["The email has already been taken."],
              "password": ["The password must be at least 8 characters."],
              "roles": ["The selected roles is invalid."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/v1/users/{uuid}'
    metadata:
      groupName: User
      groupDescription: |-

        API endpoints for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user (PATCH)'
      description: "Partially updates a user's information and/or roles. Only provided fields will be updated."
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      uuid:
        name: uuid
        description: 'The UUID of the user to update.'
        required: true
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      uuid: 550e8400-e29b-41d4-a716-446655440000
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: "optional The user's first name."
        required: false
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "optional The user's email address. Must be unique."
        required: false
        example: john.doe@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      last_name:
        name: last_name
        description: "optional The user's last name."
        required: false
        example: Doe
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "optional The user's password. Must be at least 8 characters."
        required: false
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      roles:
        name: roles
        description: 'optional Array of role names to assign to the user.'
        required: false
        example:
          - user
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'optional Password confirmation. Must match password if password is provided.'
        required: false
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: John
      email: john.doe@example.com
      last_name: Doe
      password: password123
      roles:
        - user
      password_confirmation: password123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "uuid": "550e8400-e29b-41d4-a716-446655440000",
            "name": "John",
            "last_name": "Doe",
            "email": "john.doe@example.com",
            "roles": [
              {
                "name": "user"
              }
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "User not found"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "email": ["The email has already been taken."],
              "password": ["The password must be at least 8 characters."],
              "roles": ["The selected roles is invalid."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
